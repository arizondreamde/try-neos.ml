<?php 

namespace Neos\Neos\Domain\Service;

/*
 * This file is part of the Neos.Neos package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Cache\Frontend\VariableFrontend;
use Neos\Fusion\Core\FusionConfiguration;
use Neos\Neos\Domain\Model\Site;

/**
 * @Flow\Scope("singleton")
 * @internal
 */
class FusionConfigurationCache_Original
{
    public function __construct(
        private VariableFrontend $cache,
        private ?bool $enabled
    ) {
    }

    /**
     * @param \Closure(): FusionConfiguration $fusionConfigurationFactory
     */
    public function cacheFusionConfigurationBySite(Site $site, \Closure $fusionConfigurationFactory): FusionConfiguration
    {
        if (!$this->enabled) {
            return $fusionConfigurationFactory();
        }

        $siteResourcesPackageKey = $site->getSiteResourcesPackageKey();

        $cacheIdentifier = str_replace('.', '_', $siteResourcesPackageKey);

        if ($this->cache->has($cacheIdentifier)) {
            return FusionConfiguration::fromArray($this->cache->get($cacheIdentifier));
        }

        $fusionConfiguration = $fusionConfigurationFactory();

        $this->cache->set($cacheIdentifier, $fusionConfiguration->toArray());

        return $fusionConfiguration;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * @Flow\Scope("singleton")
 * @internal
 * @codeCoverageIgnore
 */
final class FusionConfigurationCache extends FusionConfigurationCache_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        $arguments = func_get_args();
        if (get_class($this) === 'Neos\Neos\Domain\Service\FusionConfigurationCache') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\Domain\Service\FusionConfigurationCache', $this);

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Cache\CacheManager')->getCache('Neos_Neos_Fusion');
        if (!array_key_exists(1, $arguments)) $arguments[1] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration(\Neos\Flow\Configuration\ConfigurationManager::CONFIGURATION_TYPE_SETTINGS, 'Neos.Neos.fusion.enableObjectTreeCache');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $cache in class ' . __CLASS__ . '. Please check your calling code and Dependency Injection configuration.', 1296143787);
        if (!array_key_exists(1, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $enabled in class ' . __CLASS__ . '. Please check your calling code and Dependency Injection configuration.', 1296143787);
        parent::__construct(...$arguments);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Neos\Domain\Service\FusionConfigurationCache') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Neos\Domain\Service\FusionConfigurationCache', $this);

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /var/www/neos/Packages/Application/Neos.Neos/Classes/Domain/Service/FusionConfigurationCache.php
#