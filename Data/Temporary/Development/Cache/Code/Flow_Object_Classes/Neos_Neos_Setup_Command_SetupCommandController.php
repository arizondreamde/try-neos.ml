<?php 
declare(strict_types=1);

namespace Neos\Neos\Setup\Command;

/*
 * This file is part of the Neos.CliSetup package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Cli\CommandController;
use Neos\Flow\Core\Bootstrap;
use Neos\Neos\Setup\Infrastructure\ImageHandler\ImageHandlerService;
use Neos\Utility\Arrays;
use Symfony\Component\Yaml\Yaml;

class SetupCommandController_Original extends CommandController
{
    #[Flow\Inject]
    protected ImageHandlerService $imageHandlerService;

    #[Flow\Inject]
    protected Bootstrap $bootstrap;

    public function imageHandlerCommand(string $driver = null): void
    {
        $availableImageHandlers = $this->imageHandlerService->getAvailableImageHandlers();

        if (count($availableImageHandlers) === 0) {
            $enableGdOnWindowsHelpText = PHP_OS_FAMILY === 'Windows'
                ? ' To enabled Gd for basic image driver support during development, uncomment (remove the <em>;</em>) <em>;extension=gd</em> in your php.ini.'
                : '';

            $this->outputLine(
                sprintf(
                    'No supported image handler found.%s',
                    $enableGdOnWindowsHelpText
                )
            );
            $this->quit(1);
        }

        $availableDriversWithDescription = [];
        foreach ($availableImageHandlers as $imageHandler) {
            $availableDriversWithDescription[$imageHandler->driverName] = $imageHandler->description;
        }

        if ($driver === null || $driver === '') {
            $preferredImageHandler = $this->imageHandlerService->getPreferredImageHandler();
            $driver = $this->output->select(
                sprintf('Select Image Handler (<info>%s</info>): ', $preferredImageHandler->driverName),
                $availableDriversWithDescription,
                $preferredImageHandler->driverName
            );
        }

        $settingsToWrite = [
            'driver' => $driver
        ];

        if ($this->imageHandlerService->isDriverEnabledInConfiguration($driver) === false) {
            $this->outputLine('Enabled driver.');
            $settingsToWrite['enabledDrivers'][$driver] = true;
        }

        $filename = sprintf('%s%s/Settings.Imagehandling.yaml', FLOW_PATH_CONFIGURATION, $this->bootstrap->getContext()->__toString());
        $this->outputLine();
        $this->output(sprintf('<info>%s</info>', $this->writeSettings($filename, 'Neos.Imagine', $settingsToWrite)));
        $this->outputLine();
        $this->outputLine(sprintf('The new image handler setting were written to <info>%s</info>', $filename));
    }

    /**
     * Write the settings to the given path, existing configuration files are created or modified
     *
     * @param string $filename The filename the settings are stored in
     * @param string $path The configuration path
     * @param mixed $settings The actual settings to write
     * @return string The added yaml code
     */
    private function writeSettings(string $filename, string $path, mixed $settings): string
    {
        if (file_exists($filename)) {
            $previousSettings = Yaml::parseFile($filename) ?? [];
        } else {
            $previousSettings = [];
        }
        $newSettings = Arrays::setValueByPath($previousSettings, $path, $settings);
        file_put_contents($filename, YAML::dump($newSettings, 10, 2));
        return YAML::dump(Arrays::setValueByPath([],$path, $settings), 10, 2);
    }
}

#
# Start of Flow generated Proxy code
#

class SetupCommandController extends SetupCommandController_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Constructs the command controller
     */
    public function __construct()
    {
        parent::__construct();
        if ('Neos\Neos\Setup\Command\SetupCommandController' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'request' => 'Neos\\Flow\\Cli\\Request',
  'response' => 'Neos\\Flow\\Cli\\Response',
  'arguments' => 'Neos\\Flow\\Mvc\\Controller\\Arguments',
  'commandMethodName' => 'string',
  'objectManager' => 'Neos\\Flow\\ObjectManagement\\ObjectManagerInterface',
  'commandManager' => 'Neos\\Flow\\Cli\\CommandManager',
  'output' => 'Neos\\Flow\\Cli\\ConsoleOutput',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->injectCommandManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Cli\CommandManager'));
        $this->injectObjectManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ObjectManagement\ObjectManagerInterface'));
        $this->imageHandlerService = new \Neos\Neos\Setup\Infrastructure\ImageHandler\ImageHandlerService();
        $this->bootstrap = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Core\Bootstrap');
        $this->Flow_Injected_Properties = array (
  0 => 'commandManager',
  1 => 'objectManager',
  2 => 'imageHandlerService',
  3 => 'bootstrap',
);
    }
}
# PathAndFilename: /var/www/neos/Packages/Application/Neos.Neos.Setup/Classes/Command/SetupCommandController.php
#