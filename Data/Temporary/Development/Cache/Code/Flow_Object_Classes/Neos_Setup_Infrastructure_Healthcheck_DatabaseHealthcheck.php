<?php 

namespace Neos\Setup\Infrastructure\Healthcheck;

use Doctrine\DBAL\DriverManager;
use Doctrine\DBAL\Exception as DBALException;
use Neos\Flow\Configuration\ConfigurationManager;
use Neos\Flow\Core\Bootstrap;
use Neos\Setup\Domain\EarlyBootTimeHealthcheckInterface;
use Neos\Setup\Domain\Health;
use Neos\Setup\Domain\HealthcheckEnvironment;
use Neos\Setup\Domain\Status;

class DatabaseHealthcheck_Original implements EarlyBootTimeHealthcheckInterface
{
    public function __construct(
        private ConfigurationManager $configurationManager
    ) {
    }

    public static function fromBootstrap(Bootstrap $bootstrap): self
    {
        return new self(
            $bootstrap->getEarlyInstance(ConfigurationManager::class)
        );
    }

    public function getTitle(): string
    {
        return 'Database';
    }

    public function execute(HealthcheckEnvironment $environment): Health
    {
        $connectionSettings = $this->configurationManager->getConfiguration(
            ConfigurationManager::CONFIGURATION_TYPE_SETTINGS,
            'Neos.Flow.persistence.backendOptions'
        );

        if (!$connectionSettings || !isset($connectionSettings['dbname'])) {
            return new Health(
                <<<'MSG'
                Please configure your database in the settings or use the command <code>{{flowCommand}} setup:database</code>
                MSG,
                Status::ERROR()
            );
        }

        try {
            $connection = DriverManager::getConnection($connectionSettings);
            $connection->connect();
        } catch (DBALException | \PDOException $exception) {
            $additionalInfoInSafeContext = $environment->isSafeToLeakTechnicalDetails()
                ? ' Exception: "' . $exception->getMessage() . '"'
                : '';
            return new Health(
                <<<'MSG'
                Not connected. Please check your database connection settings <code>{{flowCommand}} configuration:show --path Neos.Flow.persistence.backendOptions</code>.
                You can also rerun <code>{{flowCommand}} setup:database</code>.
                MSG . $additionalInfoInSafeContext,
                Status::ERROR()
            );
        }
        return new Health('Connection up', Status::OK());
    }
}

#
# Start of Flow generated Proxy code
#

class DatabaseHealthcheck extends DatabaseHealthcheck_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        $arguments = func_get_args();

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Configuration\ConfigurationManager');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $configurationManager in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) â€“ for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /var/www/neos/Packages/Application/Neos.Setup/Classes/Infrastructure/Healthcheck/DatabaseHealthcheck.php
#