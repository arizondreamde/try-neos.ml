<?php 

declare(strict_types=1);

namespace Neos\Media\Eel;

/*
 * This file is part of the Neos.Media package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Eel\ProtectedContextAwareInterface;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Persistence\Exception\InvalidQueryException;
use Neos\Flow\Persistence\QueryResultInterface;
use Neos\Media\Domain\Model\AssetCollection;
use Neos\Media\Domain\Model\AssetInterface;
use Neos\Media\Domain\Model\Tag;
use Neos\Media\Domain\Repository\AssetCollectionRepository;
use Neos\Media\Domain\Repository\AssetRepository;
use Neos\Media\Domain\Repository\TagRepository;

/**
 * This is a helper for accessing assets from the media library
 *
 * @api
 */
class AssetsHelper_Original implements ProtectedContextAwareInterface
{
    /**
     * @Flow\Inject
     * @var AssetRepository
     */
    protected $assetRepository;

    /**
     * @Flow\Inject
     * @var TagRepository
     */
    protected $tagRepository;

    /**
     * @Flow\Inject
     * @var AssetCollectionRepository
     */
    protected $assetCollectionRepository;

    /**
     * @return QueryResultInterface | null
     * @throws InvalidQueryException
     */
    public function findByTag(Tag|string|null $tag): ?QueryResultInterface
    {
        if (is_string($tag)) {
            $tag = $this->tagRepository->findOneByLabel($tag);
        }

        if (!$tag) {
            return null;
        }
        return $this->assetRepository->findByTag($tag);
    }

    /**
     * @return QueryResultInterface<AssetInterface> | null
     */
    public function findByCollection(AssetCollection|string|null $collection): ?QueryResultInterface
    {
        if (is_string($collection)) {
            $collection = $this->assetCollectionRepository->findOneByTitle($collection);
        }

        if (!$collection) {
            return null;
        }

        return $this->assetRepository->findByAssetCollection($collection);
    }

    /**
     * @param Tag[]|string[] $tags
     * @return QueryResultInterface<AssetInterface> | null
     */
    public function search(?string $searchTerm, array $tags = [], AssetCollection|string $collection = null): ?QueryResultInterface
    {
        if (!$searchTerm) {
            return null;
        }

        $tags = array_map(function ($tag) {
            if (is_string($tag)) {
                return $this->tagRepository->findOneByLabel($tag);
            }
            return $tag;
        }, $tags);

        if (is_string($collection)) {
            $collection = $this->assetCollectionRepository->findOneByTitle($collection);
        }

        try {
            return $this->assetRepository->findBySearchTermOrTags($searchTerm, $tags, $collection);
        } catch (InvalidQueryException) {
        }

        return null;
    }

    /**
     * @param string $methodName
     */
    public function allowsCallOfMethod($methodName): bool
    {
        return true;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * This is a helper for accessing assets from the media library
 *
 * @api
 * @codeCoverageIgnore
 */
class AssetsHelper extends AssetsHelper_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('Neos\Media\Eel\AssetsHelper' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'assetRepository' => 'Neos\\Media\\Domain\\Repository\\AssetRepository',
  'tagRepository' => 'Neos\\Media\\Domain\\Repository\\TagRepository',
  'assetCollectionRepository' => 'Neos\\Media\\Domain\\Repository\\AssetCollectionRepository',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Repository\AssetRepository', 'Neos\Media\Domain\Repository\AssetRepository', 'assetRepository', '45191f771a429c7decedb6fc0abbcc74', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Repository\AssetRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Repository\TagRepository', 'Neos\Media\Domain\Repository\TagRepository', 'tagRepository', '4cf01dea3b6190efe49ffdcb9a0ab644', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Repository\TagRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Repository\AssetCollectionRepository', 'Neos\Media\Domain\Repository\AssetCollectionRepository', 'assetCollectionRepository', '75dd022c88117120d3ec81cf84770446', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Repository\AssetCollectionRepository'); });
        $this->Flow_Injected_Properties = array (
  0 => 'assetRepository',
  1 => 'tagRepository',
  2 => 'assetCollectionRepository',
);
    }
}
# PathAndFilename: /var/www/neos/Packages/Application/Neos.Media/Classes/Eel/AssetsHelper.php
#