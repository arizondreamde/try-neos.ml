<?php 
declare(strict_types=1);

namespace Neos\Media\Domain\Repository;

/*
 * This file is part of the Neos.Media package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Media\Domain\Model\ImageVariant;
use Neos\Media\Domain\Service\AssetVariantGenerator;

/**
 * @Flow\Scope("singleton")
 */
class ImageVariantRepository_Original extends AssetRepository
{
    /**
     * @Flow\Inject
     * @var AssetVariantGenerator
     */
    protected $assetVariantGenerator;

    /**
     * @return ImageVariant[]
     */
    public function findVariantsByIdentifierAndVariantName(string $identifier, string $variantName, int $limit = null): array
    {
        $queryBuilder = $this->entityManager->createQueryBuilder()
            ->select('iv')
            ->from(ImageVariant::class, 'iv')
            ->setMaxResults($limit);

        $queryBuilder
            ->where('iv.presetIdentifier = (:configuredIdentifier)')
            ->setParameter('configuredIdentifier', $identifier);

        $queryBuilder
            ->andWhere('iv.presetVariantName = (:configuredVariantName)')
            ->setParameter('configuredVariantName', $variantName);

        return $queryBuilder->getQuery()->execute();
    }

    /**
     * @return ImageVariant[]
     */
    public function findAllWithOutdatedPresets(int $limit = null): array
    {
        $queryBuilder = $this->entityManager->createQueryBuilder()
            ->select('iv')
            ->from(ImageVariant::class, 'iv')
            ->setMaxResults($limit);

        $configuredPresets = $this->assetVariantGenerator->getVariantPresets();
        $configuredIdentifiers = array_keys($configuredPresets);

        /**
         * for completely outdated preset configurations
         *
         * EXAMPLE:
         *  - you have the identifiers Neos.Cool, Neos.Yeah (and there was a Neos.Awesome previously)
         * case 1:
         *  - the user want to delete variants from Neos.Yeah
         *  - condition will not be executed - deleteFromGivenPresets is true
         * case 2:
         *  - no preset to delete from configured
         *  - condition will be executed - whole Neos.Awesome will be added to query
         */
        $queryBuilder
            ->where('iv.presetIdentifier NOT IN (:configuredIdentifiers)')
            ->setParameter('configuredIdentifiers', $configuredIdentifiers);

        $i = 0;
        foreach ($configuredPresets as $presetIdentifier => $variantPreset) {
            $queryBuilder
                ->orWhere(
                    $queryBuilder->expr()->andX()
                        ->add($queryBuilder->expr()->eq('iv.presetIdentifier', sprintf(':presetIdentifier_%d', $i)))
                        ->add($queryBuilder->expr()->notIn('iv.presetVariantName', array_keys($variantPreset->variants())))
                )
                ->setParameter(sprintf('presetIdentifier_%d', $i), $presetIdentifier);
            $i++;
        }

        return $queryBuilder->getQuery()->execute();
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class ImageVariantRepository extends ImageVariantRepository_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Initializes a new Repository.
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Media\Domain\Repository\ImageVariantRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\Domain\Repository\ImageVariantRepository', $this);
        parent::__construct();
        if ('Neos\Media\Domain\Repository\ImageVariantRepository' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'assetVariantGenerator' => 'Neos\\Media\\Domain\\Service\\AssetVariantGenerator',
  'entityManager' => '\\Doctrine\\ORM\\EntityManagerInterface',
  'defaultOrderings' => 'array',
  'assetService' => 'Neos\\Media\\Domain\\Service\\AssetService',
  'reflectionService' => 'Neos\\Flow\\Reflection\\ReflectionService',
  'persistenceManager' => 'Neos\\Flow\\Persistence\\PersistenceManagerInterface',
  'entityClassName' => 'class-string',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Media\Domain\Repository\ImageVariantRepository') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Media\Domain\Repository\ImageVariantRepository', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Service\AssetVariantGenerator', 'Neos\Media\Domain\Service\AssetVariantGenerator', 'assetVariantGenerator', '05a52c3246f5c37a0e3bcffcb4b9b212', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Service\AssetVariantGenerator'); });
        $this->Flow_Proxy_LazyPropertyInjection('Doctrine\ORM\EntityManagerInterface', 'Doctrine\ORM\EntityManagerInterface', 'entityManager', '68dcc38bb5d1acad752c62baff04cd05', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Doctrine\ORM\EntityManagerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Service\AssetService', 'Neos\Media\Domain\Service\AssetService', 'assetService', 'b8a3f9ba29596737396943e4de630328', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Service\AssetService'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Reflection\ReflectionService', 'Neos\Flow\Reflection\ReflectionService', 'reflectionService', '464c26aa94c66579c050985566cbfc1f', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Reflection\ReflectionService'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\PersistenceManagerInterface', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '8a72b773ea2cb98c2933df44c659da06', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'); });
        $this->Flow_Injected_Properties = array (
  0 => 'assetVariantGenerator',
  1 => 'entityManager',
  2 => 'assetService',
  3 => 'reflectionService',
  4 => 'persistenceManager',
);
    }
}
# PathAndFilename: /var/www/neos/Packages/Application/Neos.Media/Classes/Domain/Repository/ImageVariantRepository.php
#