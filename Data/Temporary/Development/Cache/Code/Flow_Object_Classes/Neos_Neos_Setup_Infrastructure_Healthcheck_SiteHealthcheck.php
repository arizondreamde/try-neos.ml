<?php 

namespace Neos\Neos\Setup\Infrastructure\Healthcheck;

use Neos\Flow\Package\PackageManager;
use Neos\Neos\Domain\Model\Site;
use Neos\Neos\Domain\Repository\SiteRepository;
use Neos\Setup\Domain\Health;
use Neos\Setup\Domain\HealthcheckEnvironment;
use Neos\Setup\Domain\HealthcheckInterface;
use Neos\Setup\Domain\Status;
use Neos\Setup\Domain\WebEnvironment;

class SiteHealthcheck_Original implements HealthcheckInterface
{
    public function __construct(
        private SiteRepository $siteRepository,
        private PackageManager $packageManager
    ) {
    }

    public function getTitle(): string
    {
        return 'Neos site';
    }

    public function execute(HealthcheckEnvironment $environment): Health
    {
        /** @var Site[] $sites */
        $sites = $this->siteRepository->findAll()->toArray();
        if (count($sites)) {
            if ($environment->executionEnvironment instanceof WebEnvironment) {
                $root = $environment->executionEnvironment->requestUri
                    ->withPath('')
                    ->withQuery('')
                    ->withFragment('');
                $neosLogin = $root->withPath('neos');
                $openNeosLink = sprintf('Visit your instance at <a href="%1$s">%1$s</a>. You can login via <a href="%2$s">%2$s</a>', $root, $neosLogin);
            } else {
                $openNeosLink = 'You can now visit your neos and login via at the path: <em>/neos</em>';
            }
            return new Health('Neos site exists. ' . $openNeosLink, Status::OK());
        }

        if (!$environment->isSafeToLeakTechnicalDetails()) {
            return new Health('No Neos site was created. You can run <code>{{flowCommand}} site:import</code> to import one.', Status::WARNING());
        }

        $availableSitePackagesToBeImported = [];
        foreach ($this->packageManager->getFilteredPackages('available', 'neos-site') as $sitePackage) {
            $possibleSiteContentToImport = sprintf('resource://%s/Private/Content/Sites.xml', $sitePackage->getPackageKey());
            if (file_exists($possibleSiteContentToImport)) {
                $availableSitePackagesToBeImported[] = $sitePackage->getPackageKey();
            }
        }

        if (count($availableSitePackagesToBeImported) === 0) {
            if (!$this->packageManager->isPackageAvailable('Neos.SiteKickstarter')) {
                return new Health(<<<MSG
                No Neos site was created. You might want to install the site kickstarter: <code>composer require neos/site-kickstarter</code>.
                Or you can create a new site package completely from scratch via <code>{{flowCommand}} package:create My.Site --package-type=neos-site</code>.
                After that you need to create a root NodeType (for the homepage) and setup basic rendering.
                Then you can create a site via <code>{{flowCommand}} site:create</code>.
                MSG, Status::WARNING());
            }

            return new Health(<<<MSG
            No Neos site was created. You can kickstart a new site package via <code>{{flowCommand}} kickstart:site My.Site my-site</code>
            and import it via <code>{{flowCommand}} site:import --package-key My.Site</code>
            MSG, Status::WARNING());
        }

        if (count($availableSitePackagesToBeImported) === 1) {
            $availableSitePackageKey = $availableSitePackagesToBeImported[0];
            return new Health(<<<MSG
            No Neos site was created. To import the site from $availableSitePackageKey you can run <code>{{flowCommand}} site:import --package-key $availableSitePackageKey</code>
            MSG, Status::WARNING());
        }

        $availableSitePackages = join(', ', $availableSitePackagesToBeImported);
        return new Health(<<<MSG
        No Neos site was created. To import from one of the available site packages ($availableSitePackages) you can run <code>{{flowCommand}} site:import --package-key Package.Key</code>
        MSG, Status::WARNING());
    }
}

#
# Start of Flow generated Proxy code
#

class SiteHealthcheck extends SiteHealthcheck_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        $arguments = func_get_args();

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Neos\Domain\Repository\SiteRepository');
        if (!array_key_exists(1, $arguments)) $arguments[1] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Package\PackageManager');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $siteRepository in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        if (!array_key_exists(1, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $packageManager in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /var/www/neos/Packages/Application/Neos.Neos.Setup/Classes/Infrastructure/Healthcheck/SiteHealthcheck.php
#