<?php 
namespace Neos\ContentRepository\Migration\Service;

/*
 * This file is part of the Neos.ContentRepository package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Package\Exception\UnknownPackageException;
use Neos\Flow\Package\PackageManager;
use Neos\Utility\Exception\FilesException;
use Neos\Utility\Files;

/**
 * Service for the Migration generator
 *
 */
class MigrationGeneratorService_Original
{
    /**
     * @Flow\Inject
     */
    protected PackageManager $packageManager;

    /**
     * Creates a node migration for the given $packageKey
     *
     * @param string $packageKey the package key
     * @return string
     * @throws UnknownPackageException
     * @throws FilesException
     */
    public function generateBoilerplateMigrationFileInPackage(string $packageKey): string
    {
        $templatePath = 'resource://Neos.ContentRepository/Private/Generator/Migrations/ContentRepository/NodeMigrationTemplate.yaml.tmpl';
        $nodeMigrationPath = Files::concatenatePaths([$this->packageManager->getPackage($packageKey)->getPackagePath(), 'Migrations/ContentRepository']) . '/';

        $timeStamp = (new \DateTimeImmutable())->format('YmdHis');
        $nodeMigrationFileName = 'Version' . $timeStamp . '.yaml';

        $targetPathAndFilename = $nodeMigrationPath . $nodeMigrationFileName;
        $fileContent = file_get_contents($templatePath);

        if (!is_dir(dirname($targetPathAndFilename))) {
            Files::createDirectoryRecursively(dirname($targetPathAndFilename));
        }

        file_put_contents($targetPathAndFilename, $fileContent);

        return $packageKey . '/Migrations/ContentRepository/' . $nodeMigrationFileName;
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * Service for the Migration generator
 *
 * @codeCoverageIgnore
 */
class MigrationGeneratorService extends MigrationGeneratorService_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('Neos\ContentRepository\Migration\Service\MigrationGeneratorService' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->packageManager = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Package\PackageManager');
        $this->Flow_Injected_Properties = array (
  0 => 'packageManager',
);
    }
}
# PathAndFilename: /var/www/neos/Packages/Application/Neos.ContentRepository/Classes/Migration/Service/MigrationGeneratorService.php
#