<?php 
declare(strict_types=1);

namespace Neos\Fusion\Core;

/*
 * This file is part of the Neos.Fusion package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Fusion;

/**
 * This dsl factory takes care of instantiating a Fusion dsl transpilers.
 *
 * @Flow\Scope("singleton")
 */
class DslFactory_Original
{
    /**
     * @Flow\InjectConfiguration("dsl")
     * @var array<string, class-string<DslInterface>>|null
     */
    protected $dslSettings;

    /**
     * @param string $identifier
     * @return DslInterface
     * @throws Fusion\Exception
     */
    public function create(string $identifier): DslInterface
    {
        if (is_array($this->dslSettings) && isset($this->dslSettings[$identifier])) {
            $dslObjectName = $this->dslSettings[$identifier];
            if (!class_exists($dslObjectName)) {
                throw new Fusion\Exception(sprintf('The fusion dsl-object %s was not found.', $dslObjectName), 1490776462);
            }
            $dslObject = new $dslObjectName();
            if (!$dslObject instanceof DslInterface) {
                throw new Fusion\Exception(sprintf('The fusion dsl-object was of type %s but was supposed to be of type %s', get_class($dslObject), DslInterface::class), 1490776470);
            }
            return new $dslObject();
        }
        throw new Fusion\Exception(sprintf('The fusion dsl-object for the key %s was not configured', $identifier), 1490776550);
    }
}

#
# Start of Flow generated Proxy code
#
/**
 * This dsl factory takes care of instantiating a Fusion dsl transpilers.
 *
 * @Flow\Scope("singleton")
 * @codeCoverageIgnore
 */
class DslFactory extends DslFactory_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if (get_class($this) === 'Neos\Fusion\Core\DslFactory') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Fusion\Core\DslFactory', $this);
        if ('Neos\Fusion\Core\DslFactory' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'dslSettings' => 'array<string, class-string>|null',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {
        if (get_class($this) === 'Neos\Fusion\Core\DslFactory') \Neos\Flow\Core\Bootstrap::$staticObjectManager->setInstance('Neos\Fusion\Core\DslFactory', $this);

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->dslSettings = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.Fusion.dsl');
        $this->Flow_Injected_Properties = array (
  0 => 'dslSettings',
);
    }
}
# PathAndFilename: /var/www/neos/Packages/Application/Neos.Fusion/Classes/Core/DslFactory.php
#