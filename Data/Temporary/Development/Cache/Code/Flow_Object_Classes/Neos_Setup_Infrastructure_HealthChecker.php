<?php 

namespace Neos\Setup\Infrastructure;

use Neos\Flow\Core\Bootstrap;
use Neos\Flow\Log\ThrowableStorageInterface;
use Neos\Setup\Domain\EarlyBootTimeHealthcheckInterface;
use Neos\Setup\Domain\Health;
use Neos\Setup\Domain\HealthcheckEnvironment;
use Neos\Setup\Domain\HealthcheckInterface;
use Neos\Setup\Domain\HealthCollection;
use Neos\Setup\Domain\Status;
use Neos\Utility\PositionalArraySorter;

class HealthChecker_Original
{
    public function __construct(
        private Bootstrap $bootstrap,
        private array $configuredHealthchecks,
        private HealthcheckEnvironment $healthcheckEnvironment
    ) {
    }

    public function execute(): HealthCollection
    {
        $sortedConfiguredHealthchecks = (new PositionalArraySorter($this->configuredHealthchecks, 'position'))->toArray();

        $healthCollection = HealthCollection::empty();
        foreach ($sortedConfiguredHealthchecks as $identifier => $configuration) {
            $className = $configuration['className'] ?? null;
            if (!$className) {
                continue;
            }

            $interfacesClassIsImplementing = class_implements($className);
            if (!in_array(HealthcheckInterface::class, $interfacesClassIsImplementing, true)) {
                throw new \RuntimeException('ClassName ' . $className . ' does not implement HealthcheckInterface', 1682947890221);
            }
            if (in_array(EarlyBootTimeHealthcheckInterface::class, $interfacesClassIsImplementing, true)) {
                /** @var class-string<EarlyBootTimeHealthcheckInterface>|EarlyBootTimeHealthcheckInterface $className */
                $healthcheck = $className::fromBootstrap($this->bootstrap);
            } else {
                /** @var class-string<HealthcheckInterface> $className */
                $healthcheck = $this->bootstrap->getObjectManager()->get($className);
            }

            if ($healthCollection->hasError()) {
                $healthCollection = $healthCollection->withEntry(
                    $identifier,
                    new Health(
                        message: '',
                        status: Status::NOT_RUN(),
                        title: $healthcheck->getTitle()
                    )
                );
                continue;
            }

            try {
                $health = $healthcheck->execute($this->healthcheckEnvironment);
            } catch (\Throwable $throwable) {
                $message = $this->bootstrap->getEarlyInstance(ThrowableStorageInterface::class)->logThrowable($throwable);

                $healthCollection = $healthCollection->withEntry(
                    $identifier,
                    new Health(
                        message: nl2br($message),
                        status: Status::ERROR(),
                        title: $healthcheck->getTitle()
                    )
                );
                continue;
            }

            $healthCollection = $healthCollection->withEntry(
                $identifier,
                new Health(
                    message: FlowInvocationCommand::forEnvironment(isWindows: $this->healthcheckEnvironment->executionEnvironment->isWindows)
                        ->replaceCommandPlaceHolders($health->message),
                    status: $health->status,
                    title: $healthcheck->getTitle()
                )
            );
        }

        return $healthCollection;
    }
}

#
# Start of Flow generated Proxy code
#

class HealthChecker extends HealthChecker_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        $arguments = func_get_args();

        if (!array_key_exists(0, $arguments)) $arguments[0] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Core\Bootstrap');
        if (!array_key_exists(2, $arguments)) $arguments[2] = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Setup\Domain\HealthcheckEnvironment');
        if (!array_key_exists(0, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $bootstrap in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        if (!array_key_exists(1, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $configuredHealthchecks in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        if (!array_key_exists(2, $arguments)) throw new \Neos\Flow\ObjectManagement\Exception\UnresolvedDependenciesException('Missing required constructor argument $healthcheckEnvironment in class ' . __CLASS__ . '. Note that constructor injection is only support for objects of scope singleton (and this is not a singleton) – for other scopes you must pass each required argument to the constructor yourself.', 1296143788);
        parent::__construct(...$arguments);
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
    }
}
# PathAndFilename: /var/www/neos/Packages/Application/Neos.Setup/Classes/Infrastructure/HealthChecker.php
#