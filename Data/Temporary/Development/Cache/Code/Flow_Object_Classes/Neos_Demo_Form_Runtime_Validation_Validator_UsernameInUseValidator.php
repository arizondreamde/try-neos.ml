<?php 
declare(strict_types=1);

namespace Neos\Demo\Form\Runtime\Validation\Validator;

/*
 * This file is part of the Neos.Demo package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Security\AccountRepository;
use Neos\Flow\Validation\Validator\AbstractValidator;

class UsernameInUseValidator_Original extends AbstractValidator
{
    #[Flow\Inject]
    protected ?AccountRepository $accountRepository;

    /**
     * Checks whether a given account name already exists
     * @param string $value The account name to be checked
     */
    protected function isValid($value): void
    {
        $existingAccount = $this->accountRepository->findActiveByAccountIdentifierAndAuthenticationProviderName($value, 'Neos.Neos:Backend');

        if ($existingAccount) {
            $this->addError('The given username is already in use', 1659612430);
        }
    }
}

#
# Start of Flow generated Proxy code
#

class UsernameInUseValidator extends UsernameInUseValidator_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     *
     * Constructs the validator and sets validation options
     *
     * @param array $options Options for the validator
     * @throws InvalidValidationOptionsException if unsupported options are found
     * @api
     */
    public function __construct()
    {
        $arguments = func_get_args();
        parent::__construct(...$arguments);
        if ('Neos\Demo\Form\Runtime\Validation\Validator\UsernameInUseValidator' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'acceptsEmptyValues' => 'boolean',
  'supportedOptions' => 'array',
  'options' => 'array',
  'resultStack' => 'array<Neos\\Error\\Messages\\Result>',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->accountRepository = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Security\AccountRepository');
        $this->Flow_Injected_Properties = array (
  0 => 'accountRepository',
);
    }
}
# PathAndFilename: /var/www/neos/Packages/Sites/Neos.Demo/Classes/Form/Runtime/Validation/Validator/UsernameInUseValidator.php
#