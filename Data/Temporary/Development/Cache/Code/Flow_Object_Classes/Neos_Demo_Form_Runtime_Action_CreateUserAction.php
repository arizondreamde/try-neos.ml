<?php 
declare(strict_types=1);

namespace Neos\Demo\Form\Runtime\Action;

/*
 * This file is part of the Neos.Demo package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Mvc\ActionResponse;
use Neos\Flow\Persistence\Doctrine\PersistenceManager;
use Neos\Flow\Persistence\Exception\IllegalObjectTypeException;
use Neos\Fusion\Form\Runtime\Domain\Exception\ActionException;
use Neos\Flow\Security\AccountFactory;
use Neos\Flow\Security\AccountRepository;
use Neos\Party\Domain\Repository\PartyRepository;
use Neos\Party\Domain\Service\PartyService;
use Neos\Neos\Domain\Model\User;
use Neos\Party\Domain\Model\PersonName;
use Neos\Neos\Utility\User as UserUtility;
use Neos\Fusion\Form\Runtime\Action\AbstractAction;

class CreateUserAction_Original extends AbstractAction
{
    #[Flow\Inject]
    protected ?AccountRepository $accountRepository;

    #[Flow\Inject]
    protected ?PartyRepository $partyRepository;

    #[Flow\Inject]
    protected ?PartyService $partyService;

    #[Flow\Inject]
    protected ?AccountFactory $accountFactory;

    #[Flow\Inject]
    protected ?PersistenceManager $persistenceManager;

    /**
     * @throws ActionException|IllegalObjectTypeException
     */
    public function perform(): ?ActionResponse
    {
        $accountIdentifier = $this->options['username'];
        $password = $this->options['password'];

        $existingAccount = $this->accountRepository->findActiveByAccountIdentifierAndAuthenticationProviderName($accountIdentifier, 'Neos.Neos:Backend');
        if ($existingAccount !== null) {
            throw new ActionException('Account already exists');
        }

        $firstName = ucfirst($accountIdentifier);
        $lastName = 'Demo';

        $user = new User();
        $user->setName(new PersonName('', $firstName, '', $lastName));
        $userWorkspaceName = UserUtility::getPersonalWorkspaceNameForUsername($accountIdentifier);
        $user->getPreferences()->set('context.workspace', $userWorkspaceName);
        $this->partyRepository->add($user);

        $account = $this->accountFactory->createAccountWithPassword($accountIdentifier, $password, $this->options['roles'], 'Neos.Neos:Backend');
        $this->partyService->assignAccountToParty($account, $user);
        $account->setExpirationDate(new \DateTime($this->options['expiry']));

        $this->accountRepository->add($account);
        $this->persistenceManager->persistAll();
        return null;
    }
}

#
# Start of Flow generated Proxy code
#

class CreateUserAction extends CreateUserAction_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('Neos\Demo\Form\Runtime\Action\CreateUserAction' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();
        unset($this->Flow_Persistence_RelatedEntities);

        $transientProperties = array (
);
        $propertyVarTags = array (
  'options' => 'array<mixed>',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->accountRepository = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Security\AccountRepository');
        $this->partyRepository = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Party\Domain\Repository\PartyRepository');
        $this->partyService = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Party\Domain\Service\PartyService');
        $this->accountFactory = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Security\AccountFactory');
        $this->persistenceManager = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\Doctrine\PersistenceManager');
        $this->Flow_Injected_Properties = array (
  0 => 'accountRepository',
  1 => 'partyRepository',
  2 => 'partyService',
  3 => 'accountFactory',
  4 => 'persistenceManager',
);
    }
}
# PathAndFilename: /var/www/neos/Packages/Sites/Neos.Demo/Classes/Form/Runtime/Action/CreateUserAction.php
#